

service: serverless-projects
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: 'ap-south-1'
  stage: dev
  environment:
    USERS_TABLE_NAME: users
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource:
        - "Fn::GetAtt": [ UsersTable, Arn ]

plugins: 
  - serverless-offline
  - serverless-apigateway-service-proxy
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2



resources:
 Resources:
  APIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
         - Effect: Allow
           Principal:
             Service:
             - apigateway.amazonaws.com
           Action:
            - sts:AssumeRole
      Policies:
       - PolicyName: APIPolicy
         PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:Scan"
              - "dynamodb:Query"
              Resource: 
              - !GetAtt UsersTable.Arn
              - "Fn::Join": ['/', ["Fn::GetAtt": [ UsersTable, Arn ], 'index', '*']]
  UserRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Description: Rest API for Users
      Name: users-rest-api
  UserApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: {Ref : "UserRestApi"}
      ParentId: !GetAtt 
        - UserRestApi
        - RootResourceId
      PathPart: "users"
  UserCountryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: {Ref : "UserRestApi"}
      ParentId: !GetAtt
        - UserRestApi
        - RootResourceId
      PathPart: '{country}'

  # UsersApiRequestModel:
  #   Type: 'AWS::ApiGateway::Model'
  #   Properties:
  #     RestApiId: { Ref: "UserRestApi" }
  #     ContentType: application/json
  #     Description: Schema for Pets example
  #     Name: UsersFetchModel
  #     Schema:
  #       $schema: 'http://json-schema.org/draft-04/schema#'
  #       title: usersFetchObject
  #       type: object
  #       properties: {
  #         TableName:
  #       }

  UsersApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: {Ref : "UserRestApi"}
      ResourceId: {Ref: "UserApiResource"}
      HttpMethod: GET
      MethodResponses:
      - StatusCode: "200"
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
        - ResponseTemplates:
            application/json: |
              #set($inputRoot = $input.path('$'))
              [
                "input": $inputRoot.Items
              ]
          StatusCode: "200"
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan'
        Credentials: !GetAtt APIRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          application/json: "{\"TableName\": \"users\"}"
  
  UserGetByCountryMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt APIRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - ResponseTemplates:
            application/json: |
              #set($inputRoot = $input.path('$'))
              [
                  #foreach($elem in $inputRoot.Items) {
                      "users": "$elem",
                  }#if($foreach.hasNext),#end
                  #end
              ]
          StatusCode: "200"
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          application/json: "#set($country = \"$input.params('country')\")\n{\"TableName\":\"users\",\"IndexName\":\"country-index\",\"KeyConditionExpression\":\"country=:v1\",\"ExpressionAttributeValues\":{\":v1\":{\"S\":\"$country\"}}}}"
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
      MethodResponses:
        - StatusCode: "200"
      ResourceId: !Ref UserCountryResource
      RestApiId: !Ref UserRestApi    

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
        - AttributeName: country
          AttributeType: S
      KeySchema:
        - AttributeName: uuid 
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: country-index
          KeySchema:
            - AttributeName: country
              KeyType: HASH
          Projection:
            ProjectionType: ALL
              

custom:
  apiGatewayServiceProxies:
    - dynamodb:
        path: /user/{uuid}
        method: get
        tableName: { Ref: 'UsersTable' }
        hashKey: # set pathParam or queryStringParam as a partitionkey.
          pathParam: uuid
          attributeType: S
        action: GetItem # specify action to the table what you want
# Outputs:
#   Url:
#    Description: Endpoint URL
#    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
